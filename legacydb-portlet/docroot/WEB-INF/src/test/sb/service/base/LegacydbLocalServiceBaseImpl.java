/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package test.sb.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import test.sb.model.Legacydb;

import test.sb.service.LegacydbLocalService;
import test.sb.service.persistence.LegacydbPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the legacydb local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link test.sb.service.impl.LegacydbLocalServiceImpl}.
 * </p>
 *
 * @author peter
 * @see test.sb.service.impl.LegacydbLocalServiceImpl
 * @see test.sb.service.LegacydbLocalServiceUtil
 * @generated
 */
public abstract class LegacydbLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements LegacydbLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link test.sb.service.LegacydbLocalServiceUtil} to access the legacydb local service.
	 */

	/**
	 * Adds the legacydb to the database. Also notifies the appropriate model listeners.
	 *
	 * @param legacydb the legacydb
	 * @return the legacydb that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Legacydb addLegacydb(Legacydb legacydb) throws SystemException {
		legacydb.setNew(true);

		return legacydbPersistence.update(legacydb);
	}

	/**
	 * Creates a new legacydb with the primary key. Does not add the legacydb to the database.
	 *
	 * @param legacydbid the primary key for the new legacydb
	 * @return the new legacydb
	 */
	@Override
	public Legacydb createLegacydb(long legacydbid) {
		return legacydbPersistence.create(legacydbid);
	}

	/**
	 * Deletes the legacydb with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param legacydbid the primary key of the legacydb
	 * @return the legacydb that was removed
	 * @throws PortalException if a legacydb with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Legacydb deleteLegacydb(long legacydbid)
		throws PortalException, SystemException {
		return legacydbPersistence.remove(legacydbid);
	}

	/**
	 * Deletes the legacydb from the database. Also notifies the appropriate model listeners.
	 *
	 * @param legacydb the legacydb
	 * @return the legacydb that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Legacydb deleteLegacydb(Legacydb legacydb) throws SystemException {
		return legacydbPersistence.remove(legacydb);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Legacydb.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return legacydbPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link test.sb.model.impl.LegacydbModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return legacydbPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link test.sb.model.impl.LegacydbModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return legacydbPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return legacydbPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return legacydbPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public Legacydb fetchLegacydb(long legacydbid) throws SystemException {
		return legacydbPersistence.fetchByPrimaryKey(legacydbid);
	}

	/**
	 * Returns the legacydb with the primary key.
	 *
	 * @param legacydbid the primary key of the legacydb
	 * @return the legacydb
	 * @throws PortalException if a legacydb with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Legacydb getLegacydb(long legacydbid)
		throws PortalException, SystemException {
		return legacydbPersistence.findByPrimaryKey(legacydbid);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return legacydbPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the legacydbs.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link test.sb.model.impl.LegacydbModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of legacydbs
	 * @param end the upper bound of the range of legacydbs (not inclusive)
	 * @return the range of legacydbs
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Legacydb> getLegacydbs(int start, int end)
		throws SystemException {
		return legacydbPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of legacydbs.
	 *
	 * @return the number of legacydbs
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getLegacydbsCount() throws SystemException {
		return legacydbPersistence.countAll();
	}

	/**
	 * Updates the legacydb in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param legacydb the legacydb
	 * @return the legacydb that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Legacydb updateLegacydb(Legacydb legacydb) throws SystemException {
		return legacydbPersistence.update(legacydb);
	}

	/**
	 * Returns the legacydb local service.
	 *
	 * @return the legacydb local service
	 */
	public test.sb.service.LegacydbLocalService getLegacydbLocalService() {
		return legacydbLocalService;
	}

	/**
	 * Sets the legacydb local service.
	 *
	 * @param legacydbLocalService the legacydb local service
	 */
	public void setLegacydbLocalService(
		test.sb.service.LegacydbLocalService legacydbLocalService) {
		this.legacydbLocalService = legacydbLocalService;
	}

	/**
	 * Returns the legacydb remote service.
	 *
	 * @return the legacydb remote service
	 */
	public test.sb.service.LegacydbService getLegacydbService() {
		return legacydbService;
	}

	/**
	 * Sets the legacydb remote service.
	 *
	 * @param legacydbService the legacydb remote service
	 */
	public void setLegacydbService(
		test.sb.service.LegacydbService legacydbService) {
		this.legacydbService = legacydbService;
	}

	/**
	 * Returns the legacydb persistence.
	 *
	 * @return the legacydb persistence
	 */
	public LegacydbPersistence getLegacydbPersistence() {
		return legacydbPersistence;
	}

	/**
	 * Sets the legacydb persistence.
	 *
	 * @param legacydbPersistence the legacydb persistence
	 */
	public void setLegacydbPersistence(LegacydbPersistence legacydbPersistence) {
		this.legacydbPersistence = legacydbPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("test.sb.model.Legacydb",
			legacydbLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"test.sb.model.Legacydb");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return Legacydb.class;
	}

	protected String getModelClassName() {
		return Legacydb.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = legacydbPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = test.sb.service.LegacydbLocalService.class)
	protected test.sb.service.LegacydbLocalService legacydbLocalService;
	@BeanReference(type = test.sb.service.LegacydbService.class)
	protected test.sb.service.LegacydbService legacydbService;
	@BeanReference(type = LegacydbPersistence.class)
	protected LegacydbPersistence legacydbPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private LegacydbLocalServiceClpInvoker _clpInvoker = new LegacydbLocalServiceClpInvoker();
}