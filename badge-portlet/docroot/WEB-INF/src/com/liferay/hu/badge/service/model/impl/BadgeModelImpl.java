/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.liferay.hu.badge.service.model.impl;

import com.liferay.hu.badge.service.model.Badge;
import com.liferay.hu.badge.service.model.BadgeModel;
import com.liferay.hu.badge.service.model.BadgeSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Badge service. Represents a row in the &quot;BadgePortlet_Badge&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.hu.badge.service.model.BadgeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BadgeImpl}.
 * </p>
 *
 * @author Borkuti Peter
 * @see BadgeImpl
 * @see com.liferay.hu.badge.service.model.Badge
 * @see com.liferay.hu.badge.service.model.BadgeModel
 * @generated
 */
@JSON(strict = true)
public class BadgeModelImpl extends BaseModelImpl<Badge> implements BadgeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a badge model instance should use the {@link com.liferay.hu.badge.service.model.Badge} interface instead.
	 */
	public static final String TABLE_NAME = "BadgePortlet_Badge";
	public static final Object[][] TABLE_COLUMNS = {
			{ "badgeId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "badgeType", Types.BIGINT },
			{ "assignDate", Types.TIMESTAMP },
			{ "toUser", Types.BIGINT },
			{ "fromUser", Types.BIGINT },
			{ "description", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table BadgePortlet_Badge (badgeId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,badgeType LONG,assignDate DATE null,toUser LONG,fromUser LONG,description VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table BadgePortlet_Badge";
	public static final String ORDER_BY_JPQL = " ORDER BY badge.assignDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY BadgePortlet_Badge.assignDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.hu.badge.service.model.Badge"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.hu.badge.service.model.Badge"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.hu.badge.service.model.Badge"),
			true);
	public static long BADGETYPE_COLUMN_BITMASK = 1L;
	public static long ASSIGNDATE_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Badge toModel(BadgeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Badge model = new BadgeImpl();

		model.setBadgeId(soapModel.getBadgeId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setBadgeType(soapModel.getBadgeType());
		model.setAssignDate(soapModel.getAssignDate());
		model.setToUser(soapModel.getToUser());
		model.setFromUser(soapModel.getFromUser());
		model.setDescription(soapModel.getDescription());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Badge> toModels(BadgeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Badge> models = new ArrayList<Badge>(soapModels.length);

		for (BadgeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.hu.badge.service.model.Badge"));

	public BadgeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _badgeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBadgeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _badgeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Badge.class;
	}

	@Override
	public String getModelClassName() {
		return Badge.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("badgeId", getBadgeId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("badgeType", getBadgeType());
		attributes.put("assignDate", getAssignDate());
		attributes.put("toUser", getToUser());
		attributes.put("fromUser", getFromUser());
		attributes.put("description", getDescription());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long badgeId = (Long)attributes.get("badgeId");

		if (badgeId != null) {
			setBadgeId(badgeId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long badgeType = (Long)attributes.get("badgeType");

		if (badgeType != null) {
			setBadgeType(badgeType);
		}

		Date assignDate = (Date)attributes.get("assignDate");

		if (assignDate != null) {
			setAssignDate(assignDate);
		}

		Long toUser = (Long)attributes.get("toUser");

		if (toUser != null) {
			setToUser(toUser);
		}

		Long fromUser = (Long)attributes.get("fromUser");

		if (fromUser != null) {
			setFromUser(fromUser);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}
	}

	@JSON
	@Override
	public long getBadgeId() {
		return _badgeId;
	}

	@Override
	public void setBadgeId(long badgeId) {
		_badgeId = badgeId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getBadgeType() {
		return _badgeType;
	}

	@Override
	public void setBadgeType(long badgeType) {
		_columnBitmask |= BADGETYPE_COLUMN_BITMASK;

		if (!_setOriginalBadgeType) {
			_setOriginalBadgeType = true;

			_originalBadgeType = _badgeType;
		}

		_badgeType = badgeType;
	}

	public long getOriginalBadgeType() {
		return _originalBadgeType;
	}

	@JSON
	@Override
	public Date getAssignDate() {
		return _assignDate;
	}

	@Override
	public void setAssignDate(Date assignDate) {
		_columnBitmask = -1L;

		_assignDate = assignDate;
	}

	@JSON
	@Override
	public long getToUser() {
		return _toUser;
	}

	@Override
	public void setToUser(long toUser) {
		_toUser = toUser;
	}

	@JSON
	@Override
	public long getFromUser() {
		return _fromUser;
	}

	@Override
	public void setFromUser(long fromUser) {
		_fromUser = fromUser;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Badge.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Badge toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Badge)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BadgeImpl badgeImpl = new BadgeImpl();

		badgeImpl.setBadgeId(getBadgeId());
		badgeImpl.setGroupId(getGroupId());
		badgeImpl.setCompanyId(getCompanyId());
		badgeImpl.setUserId(getUserId());
		badgeImpl.setUserName(getUserName());
		badgeImpl.setCreateDate(getCreateDate());
		badgeImpl.setModifiedDate(getModifiedDate());
		badgeImpl.setBadgeType(getBadgeType());
		badgeImpl.setAssignDate(getAssignDate());
		badgeImpl.setToUser(getToUser());
		badgeImpl.setFromUser(getFromUser());
		badgeImpl.setDescription(getDescription());

		badgeImpl.resetOriginalValues();

		return badgeImpl;
	}

	@Override
	public int compareTo(Badge badge) {
		int value = 0;

		value = DateUtil.compareTo(getAssignDate(), badge.getAssignDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Badge)) {
			return false;
		}

		Badge badge = (Badge)obj;

		long primaryKey = badge.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		BadgeModelImpl badgeModelImpl = this;

		badgeModelImpl._originalBadgeType = badgeModelImpl._badgeType;

		badgeModelImpl._setOriginalBadgeType = false;

		badgeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Badge> toCacheModel() {
		BadgeCacheModel badgeCacheModel = new BadgeCacheModel();

		badgeCacheModel.badgeId = getBadgeId();

		badgeCacheModel.groupId = getGroupId();

		badgeCacheModel.companyId = getCompanyId();

		badgeCacheModel.userId = getUserId();

		badgeCacheModel.userName = getUserName();

		String userName = badgeCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			badgeCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			badgeCacheModel.createDate = createDate.getTime();
		}
		else {
			badgeCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			badgeCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			badgeCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		badgeCacheModel.badgeType = getBadgeType();

		Date assignDate = getAssignDate();

		if (assignDate != null) {
			badgeCacheModel.assignDate = assignDate.getTime();
		}
		else {
			badgeCacheModel.assignDate = Long.MIN_VALUE;
		}

		badgeCacheModel.toUser = getToUser();

		badgeCacheModel.fromUser = getFromUser();

		badgeCacheModel.description = getDescription();

		String description = badgeCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			badgeCacheModel.description = null;
		}

		return badgeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{badgeId=");
		sb.append(getBadgeId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", badgeType=");
		sb.append(getBadgeType());
		sb.append(", assignDate=");
		sb.append(getAssignDate());
		sb.append(", toUser=");
		sb.append(getToUser());
		sb.append(", fromUser=");
		sb.append(getFromUser());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.liferay.hu.badge.service.model.Badge");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>badgeId</column-name><column-value><![CDATA[");
		sb.append(getBadgeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>badgeType</column-name><column-value><![CDATA[");
		sb.append(getBadgeType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>assignDate</column-name><column-value><![CDATA[");
		sb.append(getAssignDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toUser</column-name><column-value><![CDATA[");
		sb.append(getToUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromUser</column-name><column-value><![CDATA[");
		sb.append(getFromUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Badge.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Badge.class };
	private long _badgeId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _badgeType;
	private long _originalBadgeType;
	private boolean _setOriginalBadgeType;
	private Date _assignDate;
	private long _toUser;
	private long _fromUser;
	private String _description;
	private long _columnBitmask;
	private Badge _escapedModel;
}