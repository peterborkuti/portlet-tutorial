/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.liferay.hu.badge.service.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.GroupedModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the Badge service. Represents a row in the &quot;BadgePortlet_Badge&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.liferay.hu.badge.service.model.impl.BadgeModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.liferay.hu.badge.service.model.impl.BadgeImpl}.
 * </p>
 *
 * @author Borkuti Peter
 * @see Badge
 * @see com.liferay.hu.badge.service.model.impl.BadgeImpl
 * @see com.liferay.hu.badge.service.model.impl.BadgeModelImpl
 * @generated
 */
public interface BadgeModel extends BaseModel<Badge>, GroupedModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a badge model instance should use the {@link Badge} interface instead.
	 */

	/**
	 * Returns the primary key of this badge.
	 *
	 * @return the primary key of this badge
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this badge.
	 *
	 * @param primaryKey the primary key of this badge
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the badge ID of this badge.
	 *
	 * @return the badge ID of this badge
	 */
	public long getBadgeId();

	/**
	 * Sets the badge ID of this badge.
	 *
	 * @param badgeId the badge ID of this badge
	 */
	public void setBadgeId(long badgeId);

	/**
	 * Returns the group ID of this badge.
	 *
	 * @return the group ID of this badge
	 */
	@Override
	public long getGroupId();

	/**
	 * Sets the group ID of this badge.
	 *
	 * @param groupId the group ID of this badge
	 */
	@Override
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this badge.
	 *
	 * @return the company ID of this badge
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this badge.
	 *
	 * @param companyId the company ID of this badge
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the user ID of this badge.
	 *
	 * @return the user ID of this badge
	 */
	@Override
	public long getUserId();

	/**
	 * Sets the user ID of this badge.
	 *
	 * @param userId the user ID of this badge
	 */
	@Override
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this badge.
	 *
	 * @return the user uuid of this badge
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public String getUserUuid() throws SystemException;

	/**
	 * Sets the user uuid of this badge.
	 *
	 * @param userUuid the user uuid of this badge
	 */
	@Override
	public void setUserUuid(String userUuid);

	/**
	 * Returns the user name of this badge.
	 *
	 * @return the user name of this badge
	 */
	@AutoEscape
	@Override
	public String getUserName();

	/**
	 * Sets the user name of this badge.
	 *
	 * @param userName the user name of this badge
	 */
	@Override
	public void setUserName(String userName);

	/**
	 * Returns the create date of this badge.
	 *
	 * @return the create date of this badge
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this badge.
	 *
	 * @param createDate the create date of this badge
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this badge.
	 *
	 * @return the modified date of this badge
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this badge.
	 *
	 * @param modifiedDate the modified date of this badge
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the badge type of this badge.
	 *
	 * @return the badge type of this badge
	 */
	public long getBadgeType();

	/**
	 * Sets the badge type of this badge.
	 *
	 * @param badgeType the badge type of this badge
	 */
	public void setBadgeType(long badgeType);

	/**
	 * Returns the assign date of this badge.
	 *
	 * @return the assign date of this badge
	 */
	public Date getAssignDate();

	/**
	 * Sets the assign date of this badge.
	 *
	 * @param assignDate the assign date of this badge
	 */
	public void setAssignDate(Date assignDate);

	/**
	 * Returns the to user of this badge.
	 *
	 * @return the to user of this badge
	 */
	public long getToUser();

	/**
	 * Sets the to user of this badge.
	 *
	 * @param toUser the to user of this badge
	 */
	public void setToUser(long toUser);

	/**
	 * Returns the from user of this badge.
	 *
	 * @return the from user of this badge
	 */
	public long getFromUser();

	/**
	 * Sets the from user of this badge.
	 *
	 * @param fromUser the from user of this badge
	 */
	public void setFromUser(long fromUser);

	/**
	 * Returns the description of this badge.
	 *
	 * @return the description of this badge
	 */
	@AutoEscape
	public String getDescription();

	/**
	 * Sets the description of this badge.
	 *
	 * @param description the description of this badge
	 */
	public void setDescription(String description);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(com.liferay.hu.badge.service.model.Badge badge);

	@Override
	public int hashCode();

	@Override
	public CacheModel<com.liferay.hu.badge.service.model.Badge> toCacheModel();

	@Override
	public com.liferay.hu.badge.service.model.Badge toEscapedModel();

	@Override
	public com.liferay.hu.badge.service.model.Badge toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}