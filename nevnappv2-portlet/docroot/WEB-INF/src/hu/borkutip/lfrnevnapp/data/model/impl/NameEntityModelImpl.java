/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package hu.borkutip.lfrnevnapp.data.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import hu.borkutip.lfrnevnapp.data.model.NameEntity;
import hu.borkutip.lfrnevnapp.data.model.NameEntityModel;
import hu.borkutip.lfrnevnapp.data.model.NameEntitySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the NameEntity service. Represents a row in the &quot;nevnapp_NameEntity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link hu.borkutip.lfrnevnapp.data.model.NameEntityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NameEntityImpl}.
 * </p>
 *
 * @author PÃ©ter Borkuti
 * @see NameEntityImpl
 * @see hu.borkutip.lfrnevnapp.data.model.NameEntity
 * @see hu.borkutip.lfrnevnapp.data.model.NameEntityModel
 * @generated
 */
@JSON(strict = true)
public class NameEntityModelImpl extends BaseModelImpl<NameEntity>
	implements NameEntityModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a name entity model instance should use the {@link hu.borkutip.lfrnevnapp.data.model.NameEntity} interface instead.
	 */
	public static final String TABLE_NAME = "nevnapp_NameEntity";
	public static final Object[][] TABLE_COLUMNS = {
			{ "nameId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "gender", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table nevnapp_NameEntity (nameId LONG not null primary key,name VARCHAR(75) null,gender INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table nevnapp_NameEntity";
	public static final String ORDER_BY_JPQL = " ORDER BY nameEntity.name ASC";
	public static final String ORDER_BY_SQL = " ORDER BY nevnapp_NameEntity.name ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.hu.borkutip.lfrnevnapp.data.model.NameEntity"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.hu.borkutip.lfrnevnapp.data.model.NameEntity"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static NameEntity toModel(NameEntitySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		NameEntity model = new NameEntityImpl();

		model.setNameId(soapModel.getNameId());
		model.setName(soapModel.getName());
		model.setGender(soapModel.getGender());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<NameEntity> toModels(NameEntitySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<NameEntity> models = new ArrayList<NameEntity>(soapModels.length);

		for (NameEntitySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.hu.borkutip.lfrnevnapp.data.model.NameEntity"));

	public NameEntityModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _nameId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNameId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _nameId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return NameEntity.class;
	}

	@Override
	public String getModelClassName() {
		return NameEntity.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("nameId", getNameId());
		attributes.put("name", getName());
		attributes.put("gender", getGender());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long nameId = (Long)attributes.get("nameId");

		if (nameId != null) {
			setNameId(nameId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		Integer gender = (Integer)attributes.get("gender");

		if (gender != null) {
			setGender(gender);
		}
	}

	@JSON
	@Override
	public long getNameId() {
		return _nameId;
	}

	@Override
	public void setNameId(long nameId) {
		_nameId = nameId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public int getGender() {
		return _gender;
	}

	@Override
	public void setGender(int gender) {
		_gender = gender;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			NameEntity.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public NameEntity toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (NameEntity)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NameEntityImpl nameEntityImpl = new NameEntityImpl();

		nameEntityImpl.setNameId(getNameId());
		nameEntityImpl.setName(getName());
		nameEntityImpl.setGender(getGender());

		nameEntityImpl.resetOriginalValues();

		return nameEntityImpl;
	}

	@Override
	public int compareTo(NameEntity nameEntity) {
		int value = 0;

		value = getName().compareTo(nameEntity.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof NameEntity)) {
			return false;
		}

		NameEntity nameEntity = (NameEntity)obj;

		long primaryKey = nameEntity.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<NameEntity> toCacheModel() {
		NameEntityCacheModel nameEntityCacheModel = new NameEntityCacheModel();

		nameEntityCacheModel.nameId = getNameId();

		nameEntityCacheModel.name = getName();

		String name = nameEntityCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			nameEntityCacheModel.name = null;
		}

		nameEntityCacheModel.gender = getGender();

		return nameEntityCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{nameId=");
		sb.append(getNameId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", gender=");
		sb.append(getGender());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("hu.borkutip.lfrnevnapp.data.model.NameEntity");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>nameId</column-name><column-value><![CDATA[");
		sb.append(getNameId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gender</column-name><column-value><![CDATA[");
		sb.append(getGender());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = NameEntity.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			NameEntity.class
		};
	private long _nameId;
	private String _name;
	private int _gender;
	private NameEntity _escapedModel;
}