/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package hu.borkutip.lfrnevnapp.data.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import hu.borkutip.lfrnevnapp.data.model.NameEntity;
import hu.borkutip.lfrnevnapp.data.service.NameEntityLocalService;
import hu.borkutip.lfrnevnapp.data.service.persistence.DayEntityPersistence;
import hu.borkutip.lfrnevnapp.data.service.persistence.NameEntityPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the name entity local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link hu.borkutip.lfrnevnapp.data.service.impl.NameEntityLocalServiceImpl}.
 * </p>
 *
 * @author PÃ©ter Borkuti
 * @see hu.borkutip.lfrnevnapp.data.service.impl.NameEntityLocalServiceImpl
 * @see hu.borkutip.lfrnevnapp.data.service.NameEntityLocalServiceUtil
 * @generated
 */
public abstract class NameEntityLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements NameEntityLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link hu.borkutip.lfrnevnapp.data.service.NameEntityLocalServiceUtil} to access the name entity local service.
	 */

	/**
	 * Adds the name entity to the database. Also notifies the appropriate model listeners.
	 *
	 * @param nameEntity the name entity
	 * @return the name entity that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public NameEntity addNameEntity(NameEntity nameEntity)
		throws SystemException {
		nameEntity.setNew(true);

		return nameEntityPersistence.update(nameEntity);
	}

	/**
	 * Creates a new name entity with the primary key. Does not add the name entity to the database.
	 *
	 * @param nameId the primary key for the new name entity
	 * @return the new name entity
	 */
	@Override
	public NameEntity createNameEntity(long nameId) {
		return nameEntityPersistence.create(nameId);
	}

	/**
	 * Deletes the name entity with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param nameId the primary key of the name entity
	 * @return the name entity that was removed
	 * @throws PortalException if a name entity with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public NameEntity deleteNameEntity(long nameId)
		throws PortalException, SystemException {
		return nameEntityPersistence.remove(nameId);
	}

	/**
	 * Deletes the name entity from the database. Also notifies the appropriate model listeners.
	 *
	 * @param nameEntity the name entity
	 * @return the name entity that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public NameEntity deleteNameEntity(NameEntity nameEntity)
		throws SystemException {
		return nameEntityPersistence.remove(nameEntity);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(NameEntity.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return nameEntityPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link hu.borkutip.lfrnevnapp.data.model.impl.NameEntityModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return nameEntityPersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link hu.borkutip.lfrnevnapp.data.model.impl.NameEntityModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return nameEntityPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return nameEntityPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return nameEntityPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public NameEntity fetchNameEntity(long nameId) throws SystemException {
		return nameEntityPersistence.fetchByPrimaryKey(nameId);
	}

	/**
	 * Returns the name entity with the primary key.
	 *
	 * @param nameId the primary key of the name entity
	 * @return the name entity
	 * @throws PortalException if a name entity with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public NameEntity getNameEntity(long nameId)
		throws PortalException, SystemException {
		return nameEntityPersistence.findByPrimaryKey(nameId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return nameEntityPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the name entities.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link hu.borkutip.lfrnevnapp.data.model.impl.NameEntityModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of name entities
	 * @param end the upper bound of the range of name entities (not inclusive)
	 * @return the range of name entities
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<NameEntity> getNameEntities(int start, int end)
		throws SystemException {
		return nameEntityPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of name entities.
	 *
	 * @return the number of name entities
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getNameEntitiesCount() throws SystemException {
		return nameEntityPersistence.countAll();
	}

	/**
	 * Updates the name entity in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param nameEntity the name entity
	 * @return the name entity that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public NameEntity updateNameEntity(NameEntity nameEntity)
		throws SystemException {
		return nameEntityPersistence.update(nameEntity);
	}

	/**
	 * Returns the day entity local service.
	 *
	 * @return the day entity local service
	 */
	public hu.borkutip.lfrnevnapp.data.service.DayEntityLocalService getDayEntityLocalService() {
		return dayEntityLocalService;
	}

	/**
	 * Sets the day entity local service.
	 *
	 * @param dayEntityLocalService the day entity local service
	 */
	public void setDayEntityLocalService(
		hu.borkutip.lfrnevnapp.data.service.DayEntityLocalService dayEntityLocalService) {
		this.dayEntityLocalService = dayEntityLocalService;
	}

	/**
	 * Returns the day entity remote service.
	 *
	 * @return the day entity remote service
	 */
	public hu.borkutip.lfrnevnapp.data.service.DayEntityService getDayEntityService() {
		return dayEntityService;
	}

	/**
	 * Sets the day entity remote service.
	 *
	 * @param dayEntityService the day entity remote service
	 */
	public void setDayEntityService(
		hu.borkutip.lfrnevnapp.data.service.DayEntityService dayEntityService) {
		this.dayEntityService = dayEntityService;
	}

	/**
	 * Returns the day entity persistence.
	 *
	 * @return the day entity persistence
	 */
	public DayEntityPersistence getDayEntityPersistence() {
		return dayEntityPersistence;
	}

	/**
	 * Sets the day entity persistence.
	 *
	 * @param dayEntityPersistence the day entity persistence
	 */
	public void setDayEntityPersistence(
		DayEntityPersistence dayEntityPersistence) {
		this.dayEntityPersistence = dayEntityPersistence;
	}

	/**
	 * Returns the name entity local service.
	 *
	 * @return the name entity local service
	 */
	public hu.borkutip.lfrnevnapp.data.service.NameEntityLocalService getNameEntityLocalService() {
		return nameEntityLocalService;
	}

	/**
	 * Sets the name entity local service.
	 *
	 * @param nameEntityLocalService the name entity local service
	 */
	public void setNameEntityLocalService(
		hu.borkutip.lfrnevnapp.data.service.NameEntityLocalService nameEntityLocalService) {
		this.nameEntityLocalService = nameEntityLocalService;
	}

	/**
	 * Returns the name entity remote service.
	 *
	 * @return the name entity remote service
	 */
	public hu.borkutip.lfrnevnapp.data.service.NameEntityService getNameEntityService() {
		return nameEntityService;
	}

	/**
	 * Sets the name entity remote service.
	 *
	 * @param nameEntityService the name entity remote service
	 */
	public void setNameEntityService(
		hu.borkutip.lfrnevnapp.data.service.NameEntityService nameEntityService) {
		this.nameEntityService = nameEntityService;
	}

	/**
	 * Returns the name entity persistence.
	 *
	 * @return the name entity persistence
	 */
	public NameEntityPersistence getNameEntityPersistence() {
		return nameEntityPersistence;
	}

	/**
	 * Sets the name entity persistence.
	 *
	 * @param nameEntityPersistence the name entity persistence
	 */
	public void setNameEntityPersistence(
		NameEntityPersistence nameEntityPersistence) {
		this.nameEntityPersistence = nameEntityPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("hu.borkutip.lfrnevnapp.data.model.NameEntity",
			nameEntityLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"hu.borkutip.lfrnevnapp.data.model.NameEntity");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return NameEntity.class;
	}

	protected String getModelClassName() {
		return NameEntity.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = nameEntityPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = hu.borkutip.lfrnevnapp.data.service.DayEntityLocalService.class)
	protected hu.borkutip.lfrnevnapp.data.service.DayEntityLocalService dayEntityLocalService;
	@BeanReference(type = hu.borkutip.lfrnevnapp.data.service.DayEntityService.class)
	protected hu.borkutip.lfrnevnapp.data.service.DayEntityService dayEntityService;
	@BeanReference(type = DayEntityPersistence.class)
	protected DayEntityPersistence dayEntityPersistence;
	@BeanReference(type = hu.borkutip.lfrnevnapp.data.service.NameEntityLocalService.class)
	protected hu.borkutip.lfrnevnapp.data.service.NameEntityLocalService nameEntityLocalService;
	@BeanReference(type = hu.borkutip.lfrnevnapp.data.service.NameEntityService.class)
	protected hu.borkutip.lfrnevnapp.data.service.NameEntityService nameEntityService;
	@BeanReference(type = NameEntityPersistence.class)
	protected NameEntityPersistence nameEntityPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private NameEntityLocalServiceClpInvoker _clpInvoker = new NameEntityLocalServiceClpInvoker();
}