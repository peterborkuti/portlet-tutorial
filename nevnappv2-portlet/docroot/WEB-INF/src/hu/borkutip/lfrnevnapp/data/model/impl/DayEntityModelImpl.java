/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package hu.borkutip.lfrnevnapp.data.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import hu.borkutip.lfrnevnapp.data.model.DayEntity;
import hu.borkutip.lfrnevnapp.data.model.DayEntityModel;
import hu.borkutip.lfrnevnapp.data.model.DayEntitySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DayEntity service. Represents a row in the &quot;nevnapp_DayEntity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link hu.borkutip.lfrnevnapp.data.model.DayEntityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DayEntityImpl}.
 * </p>
 *
 * @author PÃ©ter Borkuti
 * @see DayEntityImpl
 * @see hu.borkutip.lfrnevnapp.data.model.DayEntity
 * @see hu.borkutip.lfrnevnapp.data.model.DayEntityModel
 * @generated
 */
@JSON(strict = true)
public class DayEntityModelImpl extends BaseModelImpl<DayEntity>
	implements DayEntityModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a day entity model instance should use the {@link hu.borkutip.lfrnevnapp.data.model.DayEntity} interface instead.
	 */
	public static final String TABLE_NAME = "nevnapp_DayEntity";
	public static final Object[][] TABLE_COLUMNS = {
			{ "dayId", Types.BIGINT },
			{ "month", Types.INTEGER },
			{ "day", Types.INTEGER },
			{ "nameId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table nevnapp_DayEntity (dayId LONG not null primary key,month INTEGER,day INTEGER,nameId LONG)";
	public static final String TABLE_SQL_DROP = "drop table nevnapp_DayEntity";
	public static final String ORDER_BY_JPQL = " ORDER BY dayEntity.month ASC, dayEntity.day ASC";
	public static final String ORDER_BY_SQL = " ORDER BY nevnapp_DayEntity.month ASC, nevnapp_DayEntity.day ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.hu.borkutip.lfrnevnapp.data.model.DayEntity"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.hu.borkutip.lfrnevnapp.data.model.DayEntity"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.hu.borkutip.lfrnevnapp.data.model.DayEntity"),
			true);
	public static long DAY_COLUMN_BITMASK = 1L;
	public static long MONTH_COLUMN_BITMASK = 2L;
	public static long NAMEID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DayEntity toModel(DayEntitySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DayEntity model = new DayEntityImpl();

		model.setDayId(soapModel.getDayId());
		model.setMonth(soapModel.getMonth());
		model.setDay(soapModel.getDay());
		model.setNameId(soapModel.getNameId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DayEntity> toModels(DayEntitySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DayEntity> models = new ArrayList<DayEntity>(soapModels.length);

		for (DayEntitySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.hu.borkutip.lfrnevnapp.data.model.DayEntity"));

	public DayEntityModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dayId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDayId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dayId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DayEntity.class;
	}

	@Override
	public String getModelClassName() {
		return DayEntity.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("dayId", getDayId());
		attributes.put("month", getMonth());
		attributes.put("day", getDay());
		attributes.put("nameId", getNameId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long dayId = (Long)attributes.get("dayId");

		if (dayId != null) {
			setDayId(dayId);
		}

		Integer month = (Integer)attributes.get("month");

		if (month != null) {
			setMonth(month);
		}

		Integer day = (Integer)attributes.get("day");

		if (day != null) {
			setDay(day);
		}

		Long nameId = (Long)attributes.get("nameId");

		if (nameId != null) {
			setNameId(nameId);
		}
	}

	@JSON
	@Override
	public long getDayId() {
		return _dayId;
	}

	@Override
	public void setDayId(long dayId) {
		_dayId = dayId;
	}

	@JSON
	@Override
	public int getMonth() {
		return _month;
	}

	@Override
	public void setMonth(int month) {
		_columnBitmask = -1L;

		if (!_setOriginalMonth) {
			_setOriginalMonth = true;

			_originalMonth = _month;
		}

		_month = month;
	}

	public int getOriginalMonth() {
		return _originalMonth;
	}

	@JSON
	@Override
	public int getDay() {
		return _day;
	}

	@Override
	public void setDay(int day) {
		_columnBitmask = -1L;

		if (!_setOriginalDay) {
			_setOriginalDay = true;

			_originalDay = _day;
		}

		_day = day;
	}

	public int getOriginalDay() {
		return _originalDay;
	}

	@JSON
	@Override
	public long getNameId() {
		return _nameId;
	}

	@Override
	public void setNameId(long nameId) {
		_columnBitmask |= NAMEID_COLUMN_BITMASK;

		if (!_setOriginalNameId) {
			_setOriginalNameId = true;

			_originalNameId = _nameId;
		}

		_nameId = nameId;
	}

	public long getOriginalNameId() {
		return _originalNameId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			DayEntity.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DayEntity toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DayEntity)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DayEntityImpl dayEntityImpl = new DayEntityImpl();

		dayEntityImpl.setDayId(getDayId());
		dayEntityImpl.setMonth(getMonth());
		dayEntityImpl.setDay(getDay());
		dayEntityImpl.setNameId(getNameId());

		dayEntityImpl.resetOriginalValues();

		return dayEntityImpl;
	}

	@Override
	public int compareTo(DayEntity dayEntity) {
		int value = 0;

		if (getMonth() < dayEntity.getMonth()) {
			value = -1;
		}
		else if (getMonth() > dayEntity.getMonth()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		if (getDay() < dayEntity.getDay()) {
			value = -1;
		}
		else if (getDay() > dayEntity.getDay()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DayEntity)) {
			return false;
		}

		DayEntity dayEntity = (DayEntity)obj;

		long primaryKey = dayEntity.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DayEntityModelImpl dayEntityModelImpl = this;

		dayEntityModelImpl._originalMonth = dayEntityModelImpl._month;

		dayEntityModelImpl._setOriginalMonth = false;

		dayEntityModelImpl._originalDay = dayEntityModelImpl._day;

		dayEntityModelImpl._setOriginalDay = false;

		dayEntityModelImpl._originalNameId = dayEntityModelImpl._nameId;

		dayEntityModelImpl._setOriginalNameId = false;

		dayEntityModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DayEntity> toCacheModel() {
		DayEntityCacheModel dayEntityCacheModel = new DayEntityCacheModel();

		dayEntityCacheModel.dayId = getDayId();

		dayEntityCacheModel.month = getMonth();

		dayEntityCacheModel.day = getDay();

		dayEntityCacheModel.nameId = getNameId();

		return dayEntityCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{dayId=");
		sb.append(getDayId());
		sb.append(", month=");
		sb.append(getMonth());
		sb.append(", day=");
		sb.append(getDay());
		sb.append(", nameId=");
		sb.append(getNameId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("hu.borkutip.lfrnevnapp.data.model.DayEntity");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>dayId</column-name><column-value><![CDATA[");
		sb.append(getDayId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>month</column-name><column-value><![CDATA[");
		sb.append(getMonth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>day</column-name><column-value><![CDATA[");
		sb.append(getDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nameId</column-name><column-value><![CDATA[");
		sb.append(getNameId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DayEntity.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			DayEntity.class
		};
	private long _dayId;
	private int _month;
	private int _originalMonth;
	private boolean _setOriginalMonth;
	private int _day;
	private int _originalDay;
	private boolean _setOriginalDay;
	private long _nameId;
	private long _originalNameId;
	private boolean _setOriginalNameId;
	private long _columnBitmask;
	private DayEntity _escapedModel;
}